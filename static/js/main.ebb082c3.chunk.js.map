{"version":3,"sources":["serviceWorker.js","GeekTrust/Pagination.jsx","GeekTrust/Redux/actions.jsx","GeekTrust/Redux/actionTypes.jsx","GeekTrust/EditRow.jsx","GeekTrust/OnlyRows.jsx","GeekTrust/Table.jsx","GeekTrust/LandingPage.jsx","GeekTrust/App.js","GeekTrust/Redux/reducers.jsx","GeekTrust/Redux/store.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Pagination","pageCount","handlePageClick","previousLabel","nextLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","delMember","data","type","payload","EditRow","editFormData","handleEditFormChange","cancelBtn","value","name","onChange","required","email","role","Tooltip","title","IconButton","Save","onClick","Cancel","OnlyRows","currElem","handleEdit","useState","changeColor","setChangeColor","dispatch","useDispatch","delBtn","member","scope","style","backgroundColor","color","event","Edit","Delete","Table","mapData","memberToDel","useSelector","state","geekReducer","selectedMember","console","log","setData","useEffect","memberId","setMemberId","setEditFormData","preventDefault","fieldName","target","getAttribute","filedValue","newFormData","id","formValue","onSubmit","editedRow","newMapData","findIndex","f","e","checked","tempUser","map","user","isChecked","filter","length","key","mapdata","forEach","element","marginTop","border","borderRadius","padding","LandingPage","currentPage","setCurrentpage","search","setSearch","list","membersList","fetchData","a","axios","get","res","offSet","filterData","toLowerCase","includes","slice","Math","ceil","width","margin","placeholder","selectedPage","selected","App","initialState","reducer","combineReducers","updatedList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ebb082c3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactPaginate from 'react-paginate'\r\n\r\nconst Pagination = ({pageCount, handlePageClick}) => {\r\n  return (\r\n    <div>\r\n        <ReactPaginate  \r\n            previousLabel={'< Previous'}\r\n            nextLabel={'Next >'}\r\n            marginPagesDisplayed={3}\r\n            pageRangeDisplayed={4}\r\n            pageCount={pageCount}\r\n            onPageChange={handlePageClick}\r\n            containerClassName={'pagination justify-content-center'}\r\n            pageClassName={'page-item'}\r\n            pageLinkClassName={'page-link'}\r\n            previousClassName={'page-item'}\r\n            previousLinkClassName={'page-link'}\r\n            nextClassName={'page-item'}\r\n            nextLinkClassName={'page-link'}\r\n            />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pagination","import { ADD_DATA, DEL_MEMBER, DEL_SELECTED_MEMBER } from \"./actionTypes\"\r\n\r\nexport const addData = (data) => {\r\n    return{\r\n        type: ADD_DATA,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const delMember = (data) => {\r\n    return{\r\n        type: DEL_MEMBER,\r\n        payload: data\r\n    }\r\n} \r\n\r\nexport const delSelectedMember = (data) => {\r\n    return{\r\n        type: DEL_SELECTED_MEMBER,\r\n        payload:  data\r\n    }\r\n}","export const ADD_DATA = 'ADD_DATA'\r\nexport const DEL_MEMBER = \"DEL_MEMBER\"\r\nexport const DEL_SELECTED_MEMBER = 'DEL_SELECTED_MEMBER'","import { IconButton, Tooltip } from '@material-ui/core'\r\nimport { Cancel, Save } from '@material-ui/icons'\r\nimport React from 'react'\r\n\r\nconst EditRow = ({editFormData, handleEditFormChange, cancelBtn}) => {\r\n    return (\r\n        <tr>\r\n            <td></td>\r\n            <td><input type=\"text\" value={editFormData.name} onChange={handleEditFormChange} required='required' name='name' /></td>\r\n            <td><input type=\"email\" value={editFormData.email} onChange={handleEditFormChange} required='required' name='email' /></td>\r\n            <td><input type=\"text\" value={editFormData.role} onChange={handleEditFormChange} required='required' name='role' /></td>\r\n            <td>\r\n                <Tooltip title=\"Save\">\r\n                    <IconButton type='submit' >\r\n                        <Save />\r\n                    </IconButton>\r\n                </Tooltip> \r\n\r\n                <Tooltip title='Cancel'>\r\n                    <IconButton onClick={cancelBtn}>\r\n                        <Cancel  />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditRow","import { IconButton, Tooltip } from '@material-ui/core'\r\nimport { Delete, Edit } from '@material-ui/icons'\r\nimport React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { delMember, delSelectedMember } from './Redux/actions'\r\n\r\nconst OnlyRows = ({ currElem, handleEdit }) => {\r\n\r\n    const [changeColor, setChangeColor] = useState(false)\r\n    \r\n    const dispatch = useDispatch()\r\n\r\n    const delBtn = (member) => {\r\n        dispatch(delMember(member))\r\n    }\r\n\r\n    const handleChange = (elem) => {\r\n        dispatch(delSelectedMember(elem))\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <tr >\r\n                <th scope=\"row\"><input onChange={() => handleChange(currElem)} type=\"checkbox\" \r\n                value={currElem.name} name={currElem.name} onClick={() => setChangeColor(!changeColor)} /></th>\r\n                {\r\n                    changeColor? <>\r\n                     <td  style={{backgroundColor:'gray',color:'white'}} >{currElem.name} </td>\r\n                    <td  style={{backgroundColor:'gray',color:'white'}}>{currElem.email} </td>\r\n                    <td style={{backgroundColor:'gray',color:'white'}}>{currElem.role} </td>\r\n                    <td style={{backgroundColor:'gray',color:'white'}} >\r\n                        <Tooltip title=\"Edit\">\r\n                            <IconButton onClick={(event) => handleEdit(event, currElem)}>\r\n                                <Edit />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n    \r\n                        <Tooltip title=\"Delete\">\r\n                            <IconButton onClick={() => delBtn(currElem)} >\r\n                                <Delete />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </td>\r\n                    </> :\r\n                    <>\r\n                     <td >{currElem.name} </td>\r\n                     <td>{currElem.email} </td>\r\n                     <td>{currElem.role} </td>\r\n                     <td >\r\n                         <Tooltip title=\"Edit\">\r\n                             <IconButton onClick={(event) => handleEdit(event, currElem)}>\r\n                                 <Edit />\r\n                             </IconButton>\r\n                         </Tooltip>\r\n     \r\n                         <Tooltip title=\"Delete\">\r\n                             <IconButton onClick={() => delBtn(currElem)} >\r\n                                 <Delete />\r\n                             </IconButton>\r\n                         </Tooltip>\r\n                     </td>\r\n                     </>\r\n                }\r\n               \r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OnlyRows","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useSelector } from 'react-redux'\r\nimport EditRow from './EditRow'\r\nimport OnlyRows from './OnlyRows'\r\nimport { delMember } from './Redux/actions'\r\nimport './table.css'\r\n\r\nconst Table = ({ mapData }) => {\r\n\r\n    const memberToDel = useSelector(state => state.geekReducer.selectedMember)\r\n    console.log('memberToDel', memberToDel)\r\n\r\n    const dispatch = useDispatch()\r\n    const [data, setData] = useState([])\r\n    \r\n    useEffect(()=>{\r\n     setData(mapData)\r\n    },[mapData])\r\n    \r\n    const [memberId, setMemberId] = useState(null)\r\n    const[editFormData,setEditFormData] = useState({\r\n        name:\"\",\r\n        email:\"\",\r\n        role:\"\"\r\n    })\r\n\r\n    const handleEditFormChange = (event) => {\r\n        event.preventDefault()\r\n \r\n        const fieldName = event.target.getAttribute(\"name\")\r\n        const filedValue = event.target.value\r\n \r\n        const newFormData = {...editFormData}\r\n        newFormData[fieldName] = filedValue\r\n \r\n        setEditFormData(newFormData)\r\n     }\r\n\r\n    const handleEdit = (event,currElem) => {\r\n     event.preventDefault()\r\n     setMemberId(currElem.id)\r\n\r\n     const formValue = {\r\n         name: currElem.name,\r\n         email: currElem.email,\r\n         role: currElem.role\r\n     }\r\n     setEditFormData(formValue)\r\n    }\r\n\r\n    const handleEditSave = (event) => {\r\n        event.preventDefault()\r\n        console.log('handleEditSave')\r\n        const editedRow = {\r\n            id: memberId,\r\n            name: editFormData.name,\r\n            email: editFormData.email,\r\n            role: editFormData.role\r\n        }\r\n\r\n        const newMapData = [...data]\r\n\r\n        const index = data.findIndex((f) => f.id === memberId)\r\n\r\n        newMapData[index] = editedRow\r\n        setData(newMapData)\r\n        setMemberId(null)\r\n    }\r\n\r\n    const getDelArray = () =>{\r\n        memberToDel.forEach(element => {\r\n            dispatch(delMember(element))\r\n        });\r\n    }\r\n\r\n    const handleCheckbox = (e) => {\r\n      const {name, checked} = e.target\r\n      if(name === \"allCheckbox\"){\r\n          let tempUser = data.map((user) => { return { ...user, isChecked : checked}})\r\n          setData(tempUser)\r\n      }\r\n    }\r\n\r\n    const cancelBtn = () => {\r\n        setMemberId(null)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleEditSave} >\r\n            <table  >\r\n                <thead>\r\n                    <tr >\r\n                        <th scope=\"col\"><input type=\"checkbox\" name='allCheckbox' onChange={handleCheckbox} \r\n                        checked={data.filter((f) =>  f?.isChecked !== true ).length < 1}  /></th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Email</th>\r\n                        <th scope=\"col\">Role</th>\r\n                        <th scope=\"col\">Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                \r\n                    {\r\n                        data.map((currElem) => {\r\n                            return (\r\n                                <tbody key={currElem.id}>\r\n                                    {\r\n                                        (memberId === currElem.id) ?\r\n                                            (<EditRow  editFormData={editFormData} handleEditFormChange={handleEditFormChange} cancelBtn={cancelBtn}  />) :\r\n                                            (<OnlyRows currElem={currElem} handleEdit={handleEdit} mapdata={mapData} />)\r\n                                    }\r\n                                    </tbody>\r\n                            )\r\n                        })\r\n                    } \r\n               \r\n\r\n            </table>\r\n            <button onClick={getDelArray}\r\n            style={{backgroundColor:'#FF5171', marginTop:'20px', border:'none', borderRadius:'50px', padding:'10px'}}\r\n            >Delete Selected</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useDispatch } from 'react-redux'\r\nimport Pagination from './Pagination'\r\nimport { addData } from './Redux/actions'\r\nimport Table from './Table'\r\n\r\nconst LandingPage = () => {\r\n\r\n    const perPage = 10\r\n    const[currentPage, setCurrentpage] = useState(0) \r\n    const [search, setSearch] = useState('')\r\n\r\n    const list = useSelector(state => state.geekReducer.membersList)\r\n    console.log('list', list)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const fetchData = async () => {\r\n        const res = await axios.get('https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json')\r\n        console.log('res', res.data)\r\n        dispatch(addData(res.data))\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [])\r\n\r\n   \r\n\r\n    const handlePageClick = ({selected: selectedPage}) =>{\r\n        console.log('page clicked', selectedPage)\r\n        setCurrentpage(selectedPage)\r\n    }\r\n\r\n    const offSet = currentPage * perPage\r\n    console.log('offSet', offSet)\r\n   \r\n   \r\n    const filterData = list.filter((value) => {\r\n        if (search === '') {\r\n            return value\r\n        } else if (value.name.toLowerCase().includes(search.toLowerCase()) ||\r\n            value.email.toLowerCase().includes(search.toLowerCase()) ||\r\n            value.role.toLowerCase().includes(search.toLowerCase())) {\r\n            return value\r\n        }\r\n    }) \r\n    \r\n    console.log('filterData', filterData)\r\n\r\n    const mapData =  filterData.slice(offSet, offSet + perPage)\r\n    // dispatch(filteredData(mapData))\r\n\r\n    const pageCount = Math.ceil(filterData.length / perPage)\r\n\r\n    return (\r\n        <div style={{ width: '95vw', margin: '20px' }}>\r\n            <input style={{ width: '100%', margin: '10px', padding: '10px' }}\r\n                type=\"search\" placeholder='Search by name, email or role' value={search} onChange={(e) => setSearch(e.target.value)} />\r\n\r\n            <Table mapData={mapData} />\r\n\r\n            <Pagination pageCount={pageCount} handlePageClick={handlePageClick} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage","import React from 'react'\r\nimport LandingPage from './LandingPage'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n        <LandingPage/>\r\n    </div>\r\n  )\r\n} \r\n\r\nexport default App","import { ADD_DATA, DEL_MEMBER, DEL_SELECTED_MEMBER } from \"./actionTypes\"\r\n\r\nconst initialState = {\r\n    membersList: [],\r\n    selectedMember:[]\r\n}\r\n\r\nexport const geekReducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n\r\n        case ADD_DATA:\r\n            return {\r\n                ...state,\r\n                membersList: payload\r\n            }\r\n\r\n        case DEL_MEMBER:\r\n            const updatedList = state.membersList.filter((value)=> value.id !== payload.id)\r\n            return{\r\n                ...state,\r\n                membersList: updatedList\r\n            }\r\n\r\n        case DEL_SELECTED_MEMBER:\r\n            console.log('delselectedpayload', payload)\r\n            return{\r\n                ...state,\r\n             selectedMember: [...state.selectedMember, payload]\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    } \r\n\r\n\r\n}\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { geekReducer } from \"./reducers\";\r\n\r\nconst reducer = combineReducers({\r\n    geekReducer: geekReducer\r\n})\r\n\r\nexport const store = createStore(reducer)","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport App from \"./GeekTrust/App\";\nimport { store } from \"./GeekTrust/Redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n <App />\n </Provider>\n    ,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}